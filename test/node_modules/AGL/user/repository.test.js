'use strict';

var assert = require('assert');
var mockery = require('mockery');

var repository = require('AGL/user/repository');

describe('user/repository', function () {

    // Mocks

    var dbTestData = [];
    var dbTestError = undefined;
    var dbAccessorMock = {
        SubmitQuery : function (query, results) {
            results(dbTestError, dbTestData);
        },
    };

    var validationTestResponse = undefined;
    var validationMock = {
        Validate : function (type, value) {
            return validationTestResponse;
        },
    };

    // Setup / Teardown

    before(function () {
        mockery.enable();
        mockery.registerMock('AGL/database/db_accessor', dbAccessorMock);
        mockery.registerMock('AGL/validation', validationMock);
    });

    after(function () {
        mockery.deregisterAll();
        mockery.disable();
    });

    // Tests

    describe('NewUser()', function () {

        var testProperties = {};

        it('should throw an error if callback argument is not a function', function () {
            assert.throws(
                function () { repository.NewUser(testProperties, 'not_a_function'); },
                /Callback argument must be a function./,
                'does not throw error if callback is not a function'
            );
        });

    });

});
