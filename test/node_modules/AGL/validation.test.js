'use strict';

var assert = require('assert');

var validation = require('AGL/validation');

describe('validation', function () {

    describe('Validate(\'faketype\')', function () {

        it('should return an error message when passed an invalid type', function () {
            assert.strictEqual(
                validation.Validate('faketype', 'fake data'),
                'faketype is not a valid type.',
                'does not return correct error message when passed faketype'
            );
        });

    });

    describe('Validate(\'username\')', function () {

        it('should return an error message when username is greater than 25 characters.', function () {
            assert.strictEqual(
                validation.Validate('username', 'thisisareallyreallylongusername'),
                'Username: thisisareallyreallylongusername is invalid becasue it exceeds 25 characters',
                'does not return correct error message when passed username exceeding 25 characters'
            );
        });

        it('should return an error message when username contains non-word characters', function () {
            assert.strictEqual(
                validation.Validate('username', 'invalidu$ern@me'),
                'Username: invalidu$ern@me is invalid because it contains a non-word character. Usernames must only contain digits, letters, and underscores.',
                'does not return correct error message when passed username with non-word characters'
            );
        });

        it('should return undefined if a valid username is passed', function () {
            assert.strictEqual(
                validation.Validate('username', 'valid_username'),
                undefined,
                'does not return undefined when valid username is passed'
            );
        });
    });

    describe('Validate(\'password\')', function () {
    });

    describe('Validate(\'email\')', function () {
    });

    describe('Validate(\'public_id\')', function () {
    });

});
