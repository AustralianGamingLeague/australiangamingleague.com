'use strict';

var assert = require('assert');

var validation = require('AGL/validation');

describe('validation', function () {

    describe('Validate(\'faketype\')', function () {

        it('should return an error message when passed an invalid type', function () {
            assert.strictEqual(
                validation.Validate('faketype', 'fake data'),
                'faketype is not a valid type.',
                'does not return correct error message when passed faketype'
            );
        });

    });

    describe('Validate(\'username\')', function () {

        it('should return an error message when username is greater than 25 characters', function () {
            assert.strictEqual(
                validation.Validate('username', 'thisisareallyreallylongusername'),
                'Username: thisisareallyreallylongusername is invalid becasue it exceeds 25 characters',
                'does not return correct error message when passed username exceeding 25 characters'
            );
        });

        it('should return an error message when username contains non-word characters', function () {
            assert.strictEqual(
                validation.Validate('username', 'invalidu$ern@me'),
                'Username: invalidu$ern@me is invalid because it contains a non-word character. Usernames must only contain digits, letters, and underscores.',
                'does not return correct error message when passed username with non-word characters'
            );
        });

        it('should return undefined if a valid username is passed', function () {
            assert.strictEqual(
                validation.Validate('username', 'valid_username'),
                undefined,
                'does not return undefined when valid username is passed'
            );
        });

    });

    describe('Validate(\'password\')', function () {

        it('should return an error message when password hash is not 16 characters', function () {
            assert.strictEqual(
                validation.Validate('password', 'notsixteencharacters'),
                'Password must be a hash of length 16 characters.',
                'does not return correct error message when password hash is not 16 characters'
            );
        });

        it('should return undefined when valid password hash is passed', function () {
            assert.strictEqual(
                validation.Validate('password', 'gjebf5ik8^hb@j$a'),
                undefined,
                'does not return undefined when valid password hash is passed'
            );
        });

    });

    describe('Validate(\'email\')', function () {

        it('should return error message when email is greater than 50 characters', function () {
            assert.strictEqual(
                validation.Validate('email', 'thiswouldbeareallyreallylongemailwhichsurelyisnotvalid'),
                'Email: thiswouldbeareallyreallylongemailwhichsurelyisnotvalid must not exceed 50 characters.',
                'does not return correct error message when email is greater than 50 characters'
            );
        });

        it('should return an error message when email does not conform to RFC822 standard', function () {
            assert.strictEqual(
                validation.Validate('email', 'invalid>email@gmail.com'),
                'Email: invalid>email@gmail.com is not a valid email address.',
                'does not return correct error message when email is invalid'
            );
        });

        it('should return undefined when valid email is passed', function () {
            assert.strictEqual(
                validation.Validate('email', 'validemail@gmail.com'),
                undefined,
                'does not return undefined when valid email is passed'
            );
        });

    });

    describe('Validate(\'public_id\')', function () {

        it('should return an error message when public id is not 8 characters', function () {
            assert.strictEqual(
                validation.Validate('public_id', 'jeign'),
                'Public ID: jeign must be 8 characters long.',
                'does not return correct error message when public id is not 8 characters'
            );
        });

        it('should return an error message when public id contains illegal charaters', function () {
            assert.strictEqual(
                validation.Validate('public_id', 'ju@f_bv8'),
                'Public ID: ju@f_bv8 is invalid. Public Ids must only contain digits or letters.',
                'does not return correct error message when public id contains illegal characters.'
            );
        });

        it('should return undefined when valid public id is passed', function () {
            assert.strictEqual(
                validation.Validate('public_id', 'j45dpq8c'),
                undefined,
                'does not return undefined when valid public id is passed'
            );
        });

    });

});
