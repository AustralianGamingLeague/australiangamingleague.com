'use strict';

var assert = require('assert');

var validation = require('AGL/validation');

describe('validation', function () {

	describe('Validate(\'none\')', function () {

		it('should return undefined when type is \'none\'', function () {
			assert.strictEqual(
				validation.Validate('none', null),
				undefined,
				'expected to return undefined when type is \'none\''
			);
		});
	});

    describe('Validate(\'faketype\')', function () {

        it('should return an Error when passed an invalid type', function () {
            assert(
                validation.Validate('faketype', 'fake data') instanceof Error,
                'expected to return an Error when passed faketype'
            );
        });

    });

    describe('Validate(\'username\')', function () {

        it('should return an Error when username is greater than 25 characters', function () {
            assert(
                validation.Validate('username', 'thisisareallyreallylongusername') instanceof Error,
                'expected to return an Error when passed username exceeding 25 characters'
            );
        });

        it('should return an Error when username contains non-word characters', function () {
            assert(
                validation.Validate('username', 'invalidu$ern@me') instanceof Error,
                'expected to return an Error when passed username with non-word characters'
            );
        });

        it('should return undefined if a valid username is passed', function () {
            assert.strictEqual(
                validation.Validate('username', 'valid_username'),
                undefined,
                'expected to return undefined when valid username is passed'
            );
        });

    });

    describe('Validate(\'password\')', function () {

        it('should return an Error when password hash is not 16 characters', function () {
            assert(
                validation.Validate('password', 'notsixteencharacters'),
                'expected to return an Error when password hash is not 16 characters'
            );
        });

        it('should return undefined when valid password hash is passed', function () {
            assert.strictEqual(
                validation.Validate('password', 'gjebf5ik8^hb@j$a'),
                undefined,
                'expected to return undefined when valid password hash is passed'
            );
        });

    });

    describe('Validate(\'email\')', function () {

        it('should return error message when email is greater than 50 characters', function () {
            assert(
                validation.Validate('email', 'thiswouldbeareallyreallylongemailwhichsurelyisnotvalid') instanceof Error,
                'expected to return an Error when email is greater than 50 characters'
            );
        });

        it('should return an Error when email does not conform to RFC822 standard', function () {
            assert(
                validation.Validate('email', 'invalid>email@gmail.com') instanceof Error,
                'expected to return an Error when email is invalid'
            );
        });

        it('should return undefined when valid email is passed', function () {
            assert.strictEqual(
                validation.Validate('email', 'validemail@gmail.com'),
                undefined,
                'expected to return undefined when valid email is passed'
            );
        });

    });

    describe('Validate(\'public_id\')', function () {

        it('should return an Error when public id is not 8 characters', function () {
            assert(
                validation.Validate('public_id', 'jeign') instanceof Error,
                'expected to return an Error when public id is not 8 characters'
            );
        });

        it('should return an Error when public id contains illegal charaters', function () {
            assert(
                validation.Validate('public_id', 'ju@f_bv8') instanceof Error,
                'expected to return an Error when public id contains illegal characters.'
            );
        });

        it('should return undefined when valid public id is passed', function () {
            assert.strictEqual(
                validation.Validate('public_id', 'j45dpq8c'),
                undefined,
                'expected to return undefined when valid public id is passed'
            );
        });

    });

});
