'use strict';

var assert = require('chai').assert;
var mockObject = require('AGL/mock/mockObject');

// XXX Skipping unit test until I decide if I'm keeping mockObject
describe.skip('mockObject', function () {

	describe('newMockObject()', function () {

		it('should be able to be called ok with arguments', function () {
			assert.ok(
				mockObject.NewMockObject('testObject', true),
				'expected to be able to call NewMockObject() with arguments'
			);
		});

		it('should be able to be called ok without arguments', function () {
			assert.ok(
				mockObject.NewMockObject(),
				'expected to be able to call NewMockObject() without arguments'
			);
		});

	});

	describe('Mock Object', function () {

		it('should be able to mock a function', function () {
			var mockTestObject = mockObject.NewMockObject();
			assert.ok(
				mockTestObject.Mock('Function1', 'Mocked Function 1'),
				'expected to be able to call Mock()'
			);
		});

		it('should be able to call a mocked function', function () {
			var mockTestObject = mockObject.NewMockObject();
			mockTestObject.Mock('Function2', 'Mocked Function 2');
			assert.strictEqual(
				mockTestObject.Function2(),
				'Mocked Function 2',
				'expected mocked function to return mocked return value'
			);
		});

		it('should be able to change the return value of a mocked function', function () {
			var mockTestObject = mockObject.NewMockObject();
			mockTestObject.Mock('Function3', 'Mocked Function 3');
			mockTestObject.ChangeReturnValue('Function3', 'Changed return value');
			assert.strictEqual(
				mockTestObject.Function3(),
				'Changed return value',
				'expected mocked function to return altered return value'
			);
		});

		it('should throw an error when changing return value of an unmocked function', function () {
			var mockTestObject = mockObject.NewMockObject();
			assert.throw(
				function () {
					mockTestObject.ChangeReturnValue('Function4', 'A new value');
				},
				/Cannot change return value for function 'Function4'/,
				'expected to throw an error'
			);
		});

		it('should be able to get arguments passed to a mocked function', function () {
			var mockTestObject = mockObject.NewMockObject();
			mockTestObject.Mock('Function5', 'Mocked Function 5');
			mockTestObject.Function5('arg1', 2, { arg : 3 });
			assert.deepEqual(
				mockTestObject.GetArguments('Function5'),
				{ arg1: 'arg1', arg2: 2, arg3: { arg: 3 } },
				'expected to return an object containing passed arguments'
			);
		});

		it('should throw an error when getting arguments of an unmocked function', function () {
			var mockTestObject = mockObject.NewMockObject();
			assert.throw(
				function () {
					mockTestObject.GetArguments('Function6');
				},
				/Cannot get arguments for function 'Function6'/,
				'expected to throw an error'
			);
		});

		it('should throw an error when an unmocked function is called while all functions'
			+ ' are being enforced', function () {
			var mockTestObject = mockObject.NewMockObject('TestObject', true);
			assert.throw(
				function () {
					mockTestObject.Function7();
				},
				/Cannot call unmocked function Function7()/,
				'expected to throw an error'
			);
		});

		it('should not throw an error when an unmocked function is called while functions'
			+ ' are not being enforced', function () {
			var mockTestObject = mockObject.NewMockObject('TestObject', false);
			assert.doesNotThrow(
				function () {
					mockTestObject.Function8();
				},
				Error,
				'expected to not throw an error'
			);
		});

		it('should allow chaining of unmocked functions while functions are not being'
			+ ' enforced', function () {
			var mockTestObject = mockObject.NewMockObject('TestObject', false);
			assert.doesNotThrow(
				function () {
					mockTestObject.Function9().Function10().Function11();
				},
				Error,
				'expected to not throw an error'
			);
		});

		it('should be isolated from other mock objects', function () {
			var mockTestObject1 = mockObject.NewMockObject();
			var mockTestObject2 = mockObject.NewMockObject();
			mockTestObject1.Mock('Function12', 'Mocked on mock object 1');
			assert.throw(
				function () {
					mockTestObject2.Function12();
				},
				/Cannot call unmocked function Function12()/,
				'expected to throw an error'
			);
		});

	});

});
