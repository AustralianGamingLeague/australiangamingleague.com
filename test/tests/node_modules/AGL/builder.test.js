'use strict';

var assert     = require('assert');
var mockery    = require('mockery');

var mockObject = require('AGL/mock/mockObject');
var builder    = require('AGL/builder');

describe('builder', function () {

	// Test Data

	var testObjectName = 'testObject';
	var testPropertyMap = {
		prop1 : {
			required         : true,
			type             : 'test'
		},
		prop2 : {
			required         : false,
			type             : 'test',
			default_value    : 'Property 2'
		},
		prop3 : {
			required         : false,
			type             : 'test',
            database_default : true
		}
	};

	// Mocks

	var validationMock = mockObject.NewMockObject();
	validationMock.Mock('Validate', undefined);

	// Setup

	before(function () {
		mockery.enable();
	});

	beforeEach(function () {
		mockery.registerMock('AGL/validation', validationMock);
	});

	// Teardown

	afterEach(function () {
		mockery.deregisterAll();
	});

	after(function () {
		mockery.disable();
	});

	// Tests

	describe('NewBuilder()', function () {

		it('should return a builder object when passed valid arguments', function () {
		});

		it('should throw an error when objectName argument is missing', function () {
		});

		it('should throw an error when propertyMap argument is missing', function () {
		});

		it('should throw an error when property in propertyMap is missing \'required\' flag', function () {
		});

		it('should throw an error when \'required\' flag in propertyMap is not a boolean value', function () {
		});

		it('should throw an error when propery in propertyMap is missing \'type\' property', function () {
		});

		it('should throw an error when \'required\' flag is false and there is no \'default_value\' or \'database_default\' proeprties in the property map', function () {
		});

		it('', function () {
		});

	});

	describe('Builder Object', function () {
	});

});
