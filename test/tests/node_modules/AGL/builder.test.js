'use strict';

var assert     = require('assert');
var mockery    = require('mockery');

var mockObject = require('AGL/mock/mockObject');
var builder    = require('AGL/builder');

describe('builder', function () {

	// Mocks

	var validationMock = mockObject.NewMockObject();
	validationMock.Mock('Validate', undefined);

	// Setup

	before(function () {
		mockery.enable();
	});

	beforeEach(function () {
		mockery.registerMock('AGL/validation', validationMock);
	});

	// Teardown

	afterEach(function () {
		mockery.deregisterAll();
	});

	after(function () {
		mockery.disable();
	});

	// Tests

	describe('NewBuilder()', function () {

		it('should return an object when passed valid arguments', function () {
			var propertyMap = {
				prop1 : {
					required : true,
					type     : 'string' 
				}
			};
			assert(
				builder.NewBuilder(propertyMap, 'testObject') instanceof Object,
				'expected to return an object'
			)
		});

		it('should throw an error when objectName argument is missing', function () {
			var propertyMap = {
				prop1 : {
					required : true,
					type     : 'string' 
				}
			};
			assert.throws(
				function () {
					builder.NewBuilder(propertyMap);
				},
				/'objectName' argument required to create a new Builder./,
				'expected to throw an error'
			);
		});

		it('should throw an error when propertyMap argument is missing', function () {
			assert.throws(
				function () {
					builder.NewBuilder();
				},
				/'propertyMap' argument required to create a new Builder./,
				'expected to return an error'
			);
		});

		describe('Property Map validation', function () {

			it('should throw an error when property is missing \'required\' flag', function () {
				var propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						type     : 'string'
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, must have a 'required' property set to either true or false./,
					'expected to throw an error'
				);
			});

			it('should throw an error when \'required\' flag is not a boolean value', function () {
				var propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						required : 'yes',
						type     : 'string'
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, must have a 'required' property set to either true or false./,
					'expected to throw an error'
				);
			});

			it('should throw an error when propery is missing \'type\' property', function () {
				var propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						required : true,
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, must have a 'type' property./,
					'expected to throw an error'
				);
			});

			it('should throw an error when \'required\' flag is false and there are no'
				+ ' \'default_value\' or \'database_default\' properties', function () {
				var propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						required : false,
						type     : 'string'
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, must have either a 'default_value' or a 'database_default' property/,
					'expected to throw an error'
				);
			});

			it('should throw an error when a property has both a \'default_value\' and'
					+ ' a \'database_default\'', function () {
				var propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						required         : false,
						type             : 'string',
						default_value    : 'property2',
						database_default : true
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, should not have both 'default_value' and 'database_default' properties./,
					'expected to throw an error'
				);
			});

			it('should throw an error if a \'database_default\' is included but'
					+ ' not set to true', function () {
				var propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						required         : false,
						type             : 'string',
						database_default : false
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, must have the 'database_default' property set to true/,
					'expected to throw an error'
				);
			});

			it('should throw an error when a property has either a \'default_value\''
					+ ' or a \'database_default\' property when \'required\' is'
					+ ' set to true', function () {
				var propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						required      : true,
						type          : 'string',
						default_value : 'property2'
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, must not have a 'default_value' or a 'database_default' property/,
					'expected to throw an error'
				);

				propertyMap = {
					prop1 : {
						required : true,
						type     : 'none'
					},
					prop2 : {
						required         : true,
						type             : 'string',
						database_default : true
					}
				};
				assert.throws(
					function () {
						builder.NewBuilder(propertyMap, 'testObject');
					},
					/prop2 in the testObject property map, must not have a 'default_value' or a 'database_default' property/,
					'expected to throw an error'
				);
			});

		});

	});

	describe('Builder Object', function () {

		it('should have a setter for each of its properties', function () {
			var propertyMap = {
				prop1 : {
					required : true,
					type     : 'none'
				},
				prop2 : {
					required         : false,
					type             : 'string',
					default_value    : 'property2'
				},
				prop3 : {
					required         : false,
					type             : 'string',
					database_default : true
				}
			};
			var testObjectBuilder = builder.NewBuilder(propertyMap, 'testObject');
			assert(
				testObjectBuilder.setProp1('property1'),
				'expected to be able to call \'setProp1\' on testObjectBuilder'
			);
		});

		it('should throw an error if Build() is called before OnValidationErrors()', function () {
		});

		it('should throw an error if OnValidationErrors() is not passed a function', function () {
		});

		it('should return an ImmutableObject when Build() is called', function () {
		});

		describe('ImmutableObject', function () {

			it('should have a getter for each of its properties', function () {
			});

		});

		it('should call validation error handler when validation fails', function () {
		});

		it('should pass the validation error handler an array of errors'
				+ ' when validation fails', function () {
		});

		it('should throw an error if Build() is called and required'
				+ ' properties have not been set', function () {
		});

		it('should set relevant properties to their defaults if they were unset', function () {
		});

		it('should set properties with database defaults to'
				+ ' undefined if they were unset', function () {
		});

		it('should reset after building an object', function () {
		});

	});

});
