'use strict';

var assert     = require('chai').assert;
var mockery    = require('mockery');
var sinon      = require('sinon');

describe.skip('repository', function () {

	// Module

	var repository = null;

	// Test Data

	var testData;
	function SetTestData () {
		testData = {
			queryResult : [],
			queryError : null
		};
	}

	// Mocks

	// TODO This should be temporary. Either move to it's
	// own module or use an existing knex mock module.
	var dbAccessorMock = {};

	var userFactoryMock = {};

	// Setup

	before(function () {
		mockery.enable({ useCleanCache: true });
		mockery.registerMock('AGL/database/dbAccessor', dbAccessorMock);
		mockery.registerMock('AGL/user/factory', userFactoryMock);
		mockery.registerAllowable('validate.js');
		mockery.registerAllowable('AGL/user/repository');
		repository = require('AGL/user/repository');
	});

	beforeEach(function () {
		SetTestData();
	});

	// Teardown

	after(function () {
		mockery.deregisterAll();
		mockery.resetCache();
		mockery.disable();
	});

	// Tests

	describe('SaveUser()', function () {

		var user = {
			GetPublicId     : function () {
				return 'HQ7DL2N9';
			},
			GetUsername     : function () {
				return 'test_user';
			},
			GetPasswordHash : function () {
				return 'fy39ahry57fbgdy4it70qzbg5yti677eg2bfhklo03ht6sn5hd7hgazpljrny6ns';
			},
			GetEmail        : function () {
				return 'test_user@gmail.com';
			}
		};

		it('should insert a new user into the database if it does not exist', function (done) {
			testData.queryResult = [1];

			repository.SaveUser(user, function (error, publicId) {
				if (error) {
					console.log(error);
				}
				else {
					console.log(publicId);
				}
				done();
			});
		});

	});

	describe('GetUser()', function () {
	});

});
