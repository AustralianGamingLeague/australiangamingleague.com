'use strict';

var assert = require('chai').assert;

var validation = require('AGL/validation');

describe('validation', function () {

	describe('Validate(\'none\')', function () {

		it('should return undefined when type is \'none\'', function () {
			assert.isUndefined(
				validation.Validate('none', null),
				'expected to return undefined when type is \'none\''
			);
		});
	});

	describe('Validate(\'faketype\')', function () {

		it('should return an error when passed an invalid type', function () {
			assert.instanceOf(
				validation.Validate('faketype', 'fake data'),
				Error,
				'expected to return an error when passed faketype'
			);
		});

	});

	describe('Validate(\'string\')', function () {

		it('should return an error when value is not a string', function () {
			assert.instanceOf(
				validation.Validate('string', { nota: 'string' }),
				Error,
				'expected to return an error when passed an object'
			);
			assert.instanceOf(
				validation.Validate('string', 1008),
				Error,
				'expected to return an error when passed a number'
			);
		});

		it('should return undefined when value is a string', function () {
			assert.isUndefined(
				validation.Validate('string', 'thisisastring'),
				'expected to return undefined'
			);
		});

	});

	describe('Validate(\'datetime\')', function () {

		it('should return an error when value is not a datetime', function () {
			assert.instanceOf(
				validation.Validate('datetime', 'not a date'),
				Error,
				'expected to return an error when value is not a datetime'
			);
			assert.instanceOf(
				validation.Validate('datetime', '2015-14-03 14:59:32'),
				Error,
				'expected to return an error when month unit is invalid'
			);
		});

		it('should return undefined when value is a datetime', function () {
			assert.isUndefined(
				validation.Validate('datetime', '2015-10-03 13:57:24'),
				'expected to return undefined'
			);
		});

	});

	describe('Validate(\'AGLUsername\')', function () {

		it('should return an error when username is less than 3 characters', function () {
			assert.instanceOf(
				validation.Validate('AGLUsername', 'bo'),
				Error,
				'expected to return an error when passed username less than 3 characters'
			);
		});

		it('should return an error when username is greater than 25 characters', function () {
			assert.instanceOf(
				validation.Validate('AGLUsername', 'thisisareallyreallylongusername'),
				Error,
				'expected to return an error when passed username exceeding 25 characters'
			);
		});

		it('should return an error when username contains non-word characters', function () {
			assert.instanceOf(
				validation.Validate('AGLUsername', 'invalidu$ern@me'),
				Error,
				'expected to return an error when passed username with non-word characters'
			);
		});

		it('should return undefined if a valid username is passed', function () {
			assert.isUndefined(
				validation.Validate('AGLUsername', 'valid_username'),
				'expected to return undefined when valid username is passed'
			);
		});

	});

	describe('Validate(\'AGLPasswordHash\')', function () {

		it('should return an error when password hash is not 16 characters', function () {
			assert.instanceOf(
				validation.Validate('AGLPasswordHash', 'notsixteencharacters'),
				Error,
				'expected to return an error when password hash is not 16 characters'
			);
		});

		it('should return undefined when valid password hash is passed', function () {
			assert.isUndefined(
				validation.Validate('AGLPasswordHash', 'gjebf5ik8^hb@j$a'),
				'expected to return undefined when valid password hash is passed'
			);
		});

	});

	describe('Validate(\'email\')', function () {

		it('should return error message when email is greater than 50 characters', function () {
			assert.instanceOf(
				validation.Validate('email', 'thiswouldbeareallyreallylongemailwhichsurelyisnotvalid'),
				Error,
				'expected to return an error when email is greater than 50 characters'
			);
		});

		it('should return an error when email does not conform to RFC822 standard', function () {
			assert.instanceOf(
				validation.Validate('email', 'invalid>email@gmail.com'),
				Error,
				'expected to return an error when email is invalid'
			);
		});

		it('should return undefined when valid email is passed', function () {
			assert.isUndefined(
				validation.Validate('email', 'validemail@gmail.com'),
				'expected to return undefined when valid email is passed'
			);
		});

	});

	describe('Validate(\'AGLPublicId\')', function () {

		it('should return an error when public id is not 8 characters', function () {
			assert.instanceOf(
				validation.Validate('AGLPublicId', 'jeign'),
				Error,
				'expected to return an error when public id is not 8 characters'
			);
		});

		it('should return an error when public id contains illegal charaters', function () {
			assert.instanceOf(
				validation.Validate('AGLPublicId', 'ju@f_bv8'),
				Error,
				'expected to return an error when public id contains illegal characters.'
			);
		});

		it('should return undefined when valid public id is passed', function () {
			assert.isUndefined(
				validation.Validate('AGLPublicId', 'j45dpq8c'),
				'expected to return undefined when valid public id is passed'
			);
		});

	});

});
