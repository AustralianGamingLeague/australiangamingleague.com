 /*
 *  @file Handles logic for the user API
 *  @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var validate    = require('validate.js');

var userFactory     = require('AGL/user/factory');
var userRepository  = require('AGL/user/repository');

//==============================================================================
//  Public Functions
//==============================================================================

/*
 *  public undefined CreateUser(properties, callback)
 *
 *  Creates a new user from the provided properties
 *  and saves it to the database.
 *  Returns username to the callback if creation is successful.
 *  Returns and array of errors to the callback on error.
 *
 *  @param {object} properties - user properties
 *  @param {function} callback
 */
module.exports.CreateUser = function (properties, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

	var user = userFactory.BuildUser()
		.SetUsername(properties.username)
		.SetPasswordHash(properties.passwordHash)
		.SetEmail(properties.email)
		.OnValidationErrors(function HandleValidationErrors (errors) {
			return callback(errors);
		})
		.Build();

	userRepository.InsertUser(user, function UserInserted (error, username) {
		if (error) {
			return callback([error]);
		}
		else {
			return callback([], username);
		}
	});

};

/*
 *  public undefined GetUser(searchValue, callback)
 *
 *  Gets a single user from the database based on the search value.
 *  Returns an object of user properties to the callback if successful.
 *  Returns an array of errors if unsuccessful.
 *
 *  @param {string} searchValue - users username or email
 *  @param {function} callback
 */
module.exports.GetUser = function (searchValue, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

	userRepository.GetUser(searchValue, function UserReturned (errors, user) {
		if (errors.length > 0) {
			return callback(errors);
		}
		else {
			var userProperties = {
				username     : user.GetUsername(),
				email        : user.GetEmail(),
				permissions  : user.GetPermissions(),
				created      : user.GetCreated(),
				lastModified : user.GetLastModified()
			};
			return callback([], userProperties);
		}
	});

};

//==============================================================================
//  Private Functions
//==============================================================================

