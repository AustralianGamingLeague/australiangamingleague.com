/*
 *   @file Responsible for saving, updating, and deleting user objects to/from the database.
 *   @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var dbAccessor = require('AGL/database/dbAccessor');

//==============================================================================
//  Constants
//==============================================================================

var TABLE_NAME = 'users';

//==============================================================================
//  Public Functions
//==============================================================================

/* 
 *  public undefined SaveUser(user, callback)
 *
 *  Saves a new user to the database.
 *  Returns the new user's public_id to the callback if save is successfull.
 *
 *  @param {object} user object, generated from a factory.
 *  @param {function} callback
 */
module.exports.SaveUser = function (user, callback) {
    if (typeof callback !== 'function') {
        throw new Error("Callback argument must be a function.");
    }

    // TODO fix db accessor
    dbAccessor.SubmitQuery(
        function BuildQuery (knex) {
            return knex(TABLE_NAME)
            .insert({
                PUBLIC_ID   : user.GetPublic_id(),
                USERNAME    : user.GetUsername(),
                PASSWORD    : user.GetPassword(),
                EMAIL       : user.GetEmail(),
            });
        },
        function Results (error, data) {
            if (error) {
                return callback(error);
            }
            else {
                return callback(null, user.GetPublic_id());
            }
        }
    );

};

/* public undefined GetUser(public_id, callback)
 *
 *  Gets a user from the database based on public_id.
 *
 *  @param {string} public id - users public id
 *  @param {function} callback
 */
module.exports.GetUser = function (public_id, callback) {
    if (typeof callback !== 'function') {
        throw new Error("Callback argument must be a function.");
    }

    var validationError = validation.Validate('public_id', public_id);
    if (validationError) {
        var newError = new Error(validationError);
        newError.name = "VALIDATION_ERROR";
        callback(newError);
    }


    dbAccessor.SubmitQuery(
        function BuildQuery (knex) {
            return knex
            .select('PUBLIC_ID', 'USERNAME', 'EMAIL')
            .from(TABLE_NAME)
            .where({
                PUBLIC_ID : public_id,
            })
            .limit(1);
        },
        function Results (error, data) {
            callback(error, data);
        }
    );

};

//==============================================================================
//  Private Functions
//==============================================================================

