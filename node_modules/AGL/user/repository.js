'use strict';
//==============================================================================
//  Modules
//==============================================================================

var dbAccessor = require('AGL/database/db_accessor');

//==============================================================================
//  Constants
//==============================================================================

var TABLE_NAME = 'users';

//==============================================================================
//  Public Functions
//==============================================================================

// public undefined NewUser(properties, callback)
//
//  Saves a new user to the database.
//  Arugments to the callback: callback(error, rows).
//  On success, will return callback(null, rows).
//  On error, will return callback(error, null).
//
//  @param {object} properties required for a user.
//  @param {function} callback
//
module.exports.NewUser = function (properties, callback) {
    if (typeof callback !== 'function') {
        throw ("Callback argument must be a function.");
    }

    // TODO Validate properties
    // If validation fails send an error message in callback

    var knex = dbAccessor.GetQueryBuilder();

    knex(TABLE_NAME)
    .insert({
        PUBLIC_ID   : properties.public_id,
        USERNAME    : properties.username,
        PASSWORD    : properties.password,
        EMAIL       : properties.email,
    })
    .asCallback(callback);

};

// public undefined GetUser(public_id, callback)
//
//  Gets a user from the database based on public_id.
//  Arugments to the callback: callback(error, rows).
//  On success, will return callback(null, rows).
//  On error, will return callback(error, null).
//
//  @param {string} public id - users public id
//  @param {function} callback
//
module.exports.GetUser = function (public_id, callback) {
    if (typeof callback !== 'function') {
        throw ("Callback argument must be a function.");
    }

    // TODO Validate public_id
    // If validation fails send an error message in callback

    var knex = dbAccessor.GetQueryBuilder();

    knex
    .select('PUBLIC_ID', 'USERNAME', 'EMAIL')
    .from(TABLE_NAME)
    .where({
        PUBLIC_ID : public_id,
    })
    .limit(1)
    .asCallback(callback);
};

//==============================================================================
//  Private Functions
//==============================================================================

