/*
 *   @file Responsible for saving, updating, and deleting user objects to/from the database.
 *   @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var dbAccessor  = require('AGL/database/dbAccessor');
var userFactory = require('AGL/user/factory');
var validate    = require('validate.js');

//==============================================================================
//  Constants
//==============================================================================

var TABLE_NAME = 'users';

//==============================================================================
//  Public Functions
//==============================================================================

/* 
 *  public undefined SaveUser(user, callback)
 *
 *  Saves a new or existing user to the database.
 *  Returns the user's public id to the callback if save is successfull.
 *
 *  @param {object} user object, generated from a factory.
 *  @param {function} callback
 */
module.exports.SaveUser = function (user, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

	// TODO When I change this to either insert or update a user, use async to avoid nested callback hell

	InsertUser(user, function(error, rows) {
		if (error) {
			return callback(error);
		}

		return callback(null, rows[0]);// TODO need to actually return public ID
	});

};

/* public undefined GetUser(public_id, callback)
 *
 *  Gets a user from the database based on public_id.
 *  Returns a user object to the callback if succussfull.
 *
 *  @param {string} public id - users public id
 *  @param {function} callback
 */
module.exports.GetUser = function (publicId, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

};

//==============================================================================
//  Private Functions
//==============================================================================

function QueryUser (publicId, callback) {
}

function InsertUser (user, callback) {
	dbAccessor.GetQueryBuilder()(TABLE_NAME)
	.insert({
		publicId : user.GetPublicId(),
		username : user.GetUsername(),
		password : user.GetPasswordHash(),
		email    : user.GetEmail()
	})
	.asCallback(callback);
}

function UpdateUser (user, callback) {
}

function DeleteUser (publicId, callback) {
}

