/*
 *   @file Responsible for saving, updating, and deleting users from the database.
 *   @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var dbAccessor = require('AGL/database/dbAccessor');
var validation = require('AGL/validation');

//==============================================================================
//  Constants
//==============================================================================

var TABLE_NAME = 'users';

//==============================================================================
//  Public Functions
//==============================================================================

/* 
 *  public undefined NewUser(properties, callback)
 *
 *  Saves a new user to the database.
 *  Arugments to the callback: callback(error, rows).
 *  On success, will return callback(undefined, rows).
 *  On error, will return callback(error, undefined).
 *
 *  @param {object} properties required for a user.
 *  @param {function} callback
 */
module.exports.NewUser = function (properties, callback) {
    if (typeof callback !== 'function') {
        throw (new Error("Callback argument must be a function."));
    }

    var validationError;
    validationError = validation.Validate('username', properties.username);
    validationError = validation.Validate('password', properties.password);
    validationError = validation.Validate('email', properties.email);
    validationError = validation.Validate('public_id', properties.public_id);

    if (validationError) {
        var newError = new Error(validationError);
        newError.name = "VALIDATION_ERROR";
        callback(newError, undefined);
    }

    dbAccessor.SubmitQuery(
        function BuildQuery (knex) {
            return knex(TABLE_NAME)
            .insert({
                PUBLIC_ID   : properties.public_id,
                USERNAME    : properties.username,
                PASSWORD    : properties.password,
                EMAIL       : properties.email,
            });
        },
        function Results (error, data) {
            callback(error, data);
        }
    );

};

/* public undefined GetUser(public_id, callback)
 *
 *  Gets a user from the database based on public_id.
 *  Arugments to the callback: callback(error, rows).
 *  On success, will return callback(undefined, rows).
 *  On error, will return callback(error, undefined).
 *
 *  @param {string} public id - users public id
 *  @param {function} callback
 */
module.exports.GetUser = function (public_id, callback) {
    if (typeof callback !== 'function') {
        throw (new Error("Callback argument must be a function."));
    }

    var validationError = validation.Validate('public_id', public_id);
    if (validationError) {
        var newError = new Error(validationError);
        newError.name = "VALIDATION_ERROR";
        callback(newError, undefined);
    }


    dbAccessor.SubmitQuery(
        function BuildQuery (knex) {
            return knex
            .select('PUBLIC_ID', 'USERNAME', 'EMAIL')
            .from(TABLE_NAME)
            .where({
                PUBLIC_ID : public_id,
            })
            .limit(1);
        },
        function Results (error, data) {
            callback(error, data);
        }
    );

};

//==============================================================================
//  Private Functions
//==============================================================================

