/*
 *   @file Responsible for saving, updating, and deleting user objects to/from the database.
 *   @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var async       = require('async');

var dbAccessor  = require('AGL/database/dbAccessor');
var userFactory = require('AGL/user/factory');
var validate    = require('validate.js');

//==============================================================================
//  Constants
//==============================================================================

var TABLE_NAME = 'users';

//==============================================================================
//  Public Functions
//==============================================================================

/*
 *  public undefined InsertUser(user, callback)
 *
 *  Insert a new user into the database.
 *  Returns the user's username to the callback if insert is successfull.
 *
 *  @param {object} user object
 *  @param {function} callback
 */
module.exports.InsertUser = function (user, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

	InsertUser(user, function UserInserted (error, rows) {
		if (error) {
			// TODO Check for specific errors here to make error handling better
			return callback(error);
		}
		else {
			return callback(null, user.GetUsername());
		}
	});
};

/*
 *  public undefined UpdateUser(user, callback)
 *
 *  Update an existing user in the database.
 *  Returns the user's username to the callback if update is successfull.
 *
 *  @param {object} user object
 *  @param {function} callback
 */
module.exports.UpdateUser = function (user, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

	UpdateUser(user, function UserUpdated (error, rows) {
		if (error) {
			// TODO Check for specific errors here to make error handling better
			return callback(error);
		}
		else {
			return callback(null, user.GetUsername());
		}
	});
};

/*
 *  public undefined DeleteUser(user, callback)
 *
 *  Delete a user from the database.
 *  Returns the user's username to the callback if delete is successfull.
 *
 *  @param {object} user object
 *  @param {function} callback
 */
module.exports.DeleteUser = function (user, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

	DeleteUser(user, function UserDeleted (error, rows) {
		if (error) {
			// TODO Check for specific errors here to make error handling better
			return callback(error);
		}
		else {
			return callback(null, user.GetUsername());
		}
	});
};

/* public undefined GetUser(searchValue, callback)
 *
 *  Gets a user from the database based on username or email.
 *  Returns a user object to the callback if succussfull.
 *
 *  @param {string} searchValue - either username or email
 *  @param {function} callback
 */
module.exports.GetUser = function (searchValue, callback) {
	if (!validate.isFunction(callback)) {
		throw new Error('callback argument must be a function.');
	}

	QueryUser(searchValue, function QueryResult (error, rows) {
		if (error) {
			// TODO Check for specific errors here to make error handling better
			return callback(error);
		}
		else {
			var userData = rows[0];
			var user = userFactory.BuildUser()
				.SetUsername(userData.username)
				.SetPasswordHash(userData.password)
				.SetEmail(userData.email)
				.SetCreated(userData.created)
				.SetLastModified(userData.lastModified)
				.OnValidationErrors(function HandleValidationErrors(errors) {
					// TODO add more detail to error. Like which values failed.
					var validationError = 'User data from database failed validation.';
					return callback(validationError);
				})
				.Build();

			return callback(null, user);
		}
	});

};

//==============================================================================
//  Private Functions
//==============================================================================

/*
 *  private undefined QueryUser(searchValue, callback)
 *
 *  Query a user from the database.
 *  Returns an array of rows to the callback.
 *
 *  @param {string} searchValue = either username or email
 *  @param {function} callback
 */
function QueryUser (searchValue, callback) {
	dbAccessor.GetQueryBuilder()(TABLE_NAME)
	.select('username', 'password', 'email', 'created', 'lastModified')
	.where('username', searchValue)
	.orWhere('email', searchValue)
	.limit(1)
	.asCallback(callback);
}

/*
 *  private undefined InsertUser(searchValue, callback)
 *
 *  Insert a user into the database.
 *  Returns an array of rows to the callback.
 *
 *  @param {object} user object
 *  @param {function} callback
 */
function InsertUser (user, callback) {
	dbAccessor.GetQueryBuilder()(TABLE_NAME)
	.insert({
		username : user.GetUsername(),
		password : user.GetPasswordHash(),
		email    : user.GetEmail()
	})
	.asCallback(callback);
}

/*
 *  private undefined UpdateUser(searchValue, callback)
 *
 *  Update a user in the database.
 *  Returns an array of rows to the callback.
 *
 *  @param {object} user object
 *  @param {function} callback
 */
function UpdateUser (user, callback) {
	dbAccessor.GetQueryBuilder()(TABLE_NAME)
	.update({
		username : user.GetUsername(),
		password : user.GetPasswordHash(),
		email    : user.GetEmail()
	})
	.where('username', user.GetUsername())
	.asCallback(callback);
}

/*
 *  private undefined DeleteUser(searchValue, callback)
 *
 *  Delete a user from the database.
 *  Returns an array of rows to the callback.
 *
 *  @param {object} user object
 *  @param {function} callback
 */
function DeleteUser (username, callback) {
	dbAccessor.GetQueryBuilder()(TABLE_NAME)
	.del()
	.where('username', username)
}

