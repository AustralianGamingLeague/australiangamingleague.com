/* 
 *  @file Used to create builders based on property maps.
 *  These builders are used to build immutable objects.
 *  These objects represent a row in the database.
 *
 *  Property Map structure:
 *
 *  {
 *      'property name' : {
 *          required            : {boolean} Is this property required?
 *          type                : {string} Data type. Used for validation.
 *          default_value       : {*} Default property value.
 *          database_default    : {boolean} Let the database fill in the default.
 *      },
 *  }
 *
 *  'required' and 'type' are always mandatory.
 *  If 'required' is false, you must provide either a 'default_value' or
 *  a 'database_default'. If you provide both, 'database_default' will
 *  override 'default_value'.
 *
 *  How to use a Builder object:
 *
 *  Builders are built using a property map.
 *  All properties in the map are given a setter which can be chained off of the
 *  builder object. Once all properties are set Build() must be called to build
 *  the object.
 *
 *  var userPropertyMap = {
 *      username : {
 *          required : true,
 *          type     : 'username'
 *      },
 *      password : {
 *          required : true,
 *          type     : 'password'
 *      },
 *      level : {
 *          required : false,
 *          type     : 'number'
 *          default  : 1
 *      }
 *  };
 *  var userBuilder = builder.NewBuilder(userPropertyMap, 'User');
 *  var user = userBuilder.SetUsername('Bob').SetPassword('secret').Build();
 *
 *  The generated object will have a getter for each property.
 *
 *  console.log(Username: ' + user.GetUsername());
 *
 *  @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var validation = require('AGL/validation');

//==============================================================================
//  Public functions
//==============================================================================

/*  public object NewBuilder(propertyMap, objectName)
 *
 *  Creates a new builder based on a property map.
 *
 *  @param {object} propertyMap - A map describing the properties of the object
 *  @param {string} objectName - Name of the object the builder will be building
 *
 *  @return {object} new instance of a builder object
 */
module.exports.NewBuilder = function (propertyMap, objectName) {

    ValidatePropertyMap(propertyMap, objectName);

    return new Builder(propertyMap, objectName);
};

//==============================================================================
//  Private functions
//==============================================================================

/*  private undefined ValidatePropertyMap(propertyMap, objectName)
 *
 *  Validates that the property map is in the correct structure (see top of module)
 *  Will throw an error if it is missing something.
 *
 *  @param {object} propertyMap - A map describing the properties of the object
 *  @param {string} objectName - Name of the object the builder will be building
 */
function ValidatePropertyMap (propertyMap, objectName) {
    for (property in propertyMap) {
        if (!propertyMap.hasOwnProperty(property)) {
            continue;
        }

        if (!propertyMap[property].hasOwnProperty('required')
                || (propertyMap[property].required !== true
                && propertyMap[property].required !== false)) {
            throw new Error(property + ' in the ' + objectName + ' property map,'
                + ' must have a \'required\' property set to either true or false');
        }

        if (propertyMap[property].required === false
                && !propertyMap[property].hasOwnProperty('default_value')
                && !propertyMap[property].hasOwnProperty('database_default')) {
            throw new Error(property + ' in the ' + objectName + ' property map, must have '
                + 'a \'default_value\' or a \'database_default\' property if required is set to false');
        }

        if (!propertyMap[property].hasOwnProperty('type')) {
            throw new Error(property + ' in the ' + objectName + ' property map,'
                + ' must have a \'type\' property');
        }
    }
}

/*
 *  private array ValidateProperties(propertyMap, properties, objectName)
 *
 *  Validates the properties passed into the builder.
 *
 *  @param {object} propertyMap - A map describling the properties of the object
 *  @param {object} properties - The properties passed into the builder
 *  @param {string} objectName - Name of the object the builder will be building
 *
 *  @return {array} validationErrors - An array of Error objects
 */
function ValidateProperties (propertyMap, properties, objectName) {

    var validationErrors = [];

    for (property in propertyMap) {
        if (!propertyMap.hasOwnProperty(property)) {
            continue;
        }

        /*  If a property from the property map is missing in the provided
         *  propties, throw an error if it was required otherwise set it
         *  to its default
         */
        if (!properties.hasOwnProperty(property)) {
            if (propertyMap[property].required) {
                throw new Error('Property \'' + property + '\' is required to create '
                    + 'a new ' + objectName + ' object.');
            }
            else if (propertyMap[property].hasOwnProperty('database_default')) {
                continue;
            }
            else {
                properties[property] = propertyMap[property].default_value;
            }
        }

        validationError = validation.Validate(propertyMap[property].type, properties[property]);
        if (validationError) {
            validationErrors.push(validationError);
        }
    }

    return validationErrors;
}

/*  private undefined Builder(propertyMap, objectName)
 *
 *  Builder object
 *  var builder = new Builder(propertyMap, 'some object');
 *
 *  @param {object} propertyMap - A map describing the properties of the object
 *  @param {string} objectName - Name of the object the builder will be building
 */
function Builder (propertyMap, objectName) {

    var properties = {};

    // Generate a setter for each property.
    for (property in propertyMap) {
        var setterName = 'Set' + property.charAt(0).toUpperCase() + property.slice(1);
        this[setterName] = function (value) {
            properties[property] = value;
            return this;
        };
    }

    this.Build = function () {

        validationErrors = ValidateProperties(propertyMap, properties, objectName);
        if (validationErrors.length > 0) {
            return validationErrors;
        }

        return new ImmutableObject(properties);
    };

}

/*  private object ImmutableObject(properties)
 *
 *  An immutable object. Properties MUST be validated before being passed in.
 *  var newObject = new ImmutableObject(properties)
 *
 *  @param {object} properties - validated properties of the object to create
 */
function ImmutableObject (properties) {

    // Generate a getter for each property
    for (property in properties) {
        if (!properties.hasOwnProperty(property)) {
            continue;
        }

        var getterName = 'Get' + property.charAt(0).toUpperCase() + property.slice(1);
        this[getterName] = function () {
            return properties[property];
        }
    }
}
