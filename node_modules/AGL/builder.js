/* 
 *  @file Used to create builders based on property maps.
 *  These builders are used to build immutable objects.
 *  These objects represent a row in the database.
 *
 *  Property Map structure:
 *
 *  {
 *      'property name' : {
 *          required            : {boolean} Is this property required?
 *          type                : {string} Data type. Used for validation.
 *          default_value       : {*} Default property value.
 *          database_default    : true. Let the database fill in the default.
 *      },
 *  }
 *
 *  'required' and 'type' are always mandatory.
 *  If 'required' is false, you must provide either a 'default_value' or
 *  a 'database_default'. You cannot provide both.
 *
 *  How to use a Builder object:
 *
 *  Builders are built using a property map.
 *  All properties in the map are given a setter which can be chained off of the
 *  builder object. Once all properties are set Build() must be called to build
 *  the object. If there are any validation errors the builder will call an error
 *	handler and pass it an array of errors. OnValidationErrors(handler) must be
 *	called to to set this handler.
 *
 *  var userPropertyMap = {
 *      username : {
 *          required : true,
 *          type     : 'username'
 *      },
 *      password : {
 *          required : true,
 *          type     : 'password'
 *      },
 *      level : {
 *          required : false,
 *          type     : 'number'
 *          default  : 1
 *      }
 *  };
 *  var userBuilder = builder.NewBuilder(userPropertyMap, 'User');
 *  var user = userBuilder
 *      .SetUsername('Bob')
 *      .SetPassword('secret')
 *      .OnValidationErrors( function HandleValidationErrors(errors) {
 *          console.log(errors);
 *      })
 *      .Build();
 *
 *  The generated object will have a getter for each property.
 *
 *  console.log(Username: ' + user.GetUsername()); // 'Username: Bob'
 *
 *  @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var validation = require('AGL/validation');

//==============================================================================
//  Public functions
//==============================================================================

/*  public object NewBuilder(propertyMap, objectName)
 *
 *  Creates a new builder based on a property map.
 *
 *  Should only call this once and cache the builder for later use.
 *  Don't rebuild the same builder everytime you use it.
 *
 *  @param {object} propertyMap - A map describing the properties of the object
 *  @param {string} objectName - Name of the object the builder will be
 *                               building. Used for debugging purposes.
 *
 *  @return {object} new instance of a builder object
 */
module.exports.NewBuilder = function (propertyMap, objectName) {
	if (propertyMap === undefined) {
		throw new Error('\'propertyMap\' argument required to create a new Builder.');
	}
	if (objectName === undefined) {
		throw new Error('\'objectName\' argument required to create a new Builder.');
	}

	ValidatePropertyMap(propertyMap, objectName);

	return new Builder(propertyMap, objectName);
};

//==============================================================================
//  Private functions
//==============================================================================

/*  private undefined ValidatePropertyMap(propertyMap, objectName)
 *
 *  Validates that the property map is in the correct structure (see top of module)
 *  Will throw an error if it is missing something.
 *
 *  @param {object} propertyMap - A map describing the properties of the object
 *  @param {string} objectName - Name of the object the builder will be building
 */
function ValidatePropertyMap (propertyMap, objectName) {
	for (var property in propertyMap) {
		if (!propertyMap.hasOwnProperty(property)) {
			continue;
		}

		if (!propertyMap[property].hasOwnProperty('required')
				|| (propertyMap[property].required !== true
				&& propertyMap[property].required !== false)) {
			throw new Error(property + ' in the ' + objectName + ' property map,'
				+ ' must have a \'required\' property set to either true or false.');
		}

		if (propertyMap[property].required === false) {
			if (!propertyMap[property].hasOwnProperty('default_value')
					&& !propertyMap[property].hasOwnProperty('database_default')) {
				throw new Error(property + ' in the ' + objectName + ' property map,'
					+ ' must have either a \'default_value\' or a \'database_default\''
					+ ' property if \'required\' is set to false.');
			}
			else if (propertyMap[property].hasOwnProperty('default_value')
					&& propertyMap[property].hasOwnProperty('database_default')) {
				throw new Error(property + ' in the ' + objectName + ' property map,'
					+ ' should not have both \'default_value\' and \'database_default\''
					+ ' properties. Please choose one.');
			}
			else if (propertyMap[property].hasOwnProperty('database_default')
					&& propertyMap[property].database_default !== true) {
				throw new Error(property + ' in the ' + objectName + ' property map,'
					+ ' must have the \'database_default\' property set to true if'
					+ ' the database is setting the default for this property.');
			}
		}
		else if (propertyMap[property].required === true) {
			if (propertyMap[property].hasOwnProperty('default_value')
					|| propertyMap[property].hasOwnProperty('database_default')) {
				throw new Error(property + ' in the ' + objectName + ' property map,'
					+ ' must not have a \'default_value\' or a \'database_default\''
					+ ' property if \'required\' is set to true');
			}
		}

		if (!propertyMap[property].hasOwnProperty('type')) {
			throw new Error(property + ' in the ' + objectName + ' property map,'
				+ ' must have a \'type\' property. If you do not wish to validate'
				+ ' this property, use type \'none\'. You better have a good reason'
				+ ' for not validating a property though.');
		}
	}
}

/*
 *  private array ValidateProperties(propertyMap, properties, objectName)
 *
 *  Validates the properties passed into the builder.
 *
 *  @param {object} propertyMap - A map describling the properties of the object
 *  @param {object} properties - The properties passed into the builder
 *  @param {string} objectName - Name of the object the builder will be building
 *
 *  @return {array} validationErrors - An array of Error objects
 */
function ValidateProperties (propertyMap, properties, objectName) {

	var validationErrors = [];

	for (var property in propertyMap) {
		if (!propertyMap.hasOwnProperty(property)) {
			continue;
		}

		/*  If a property from the property map is missing in the provided
		 *  propties, throw an error if it was required otherwise set it
		 *  to its default. Database defaults are set to undefined to signify
		 *  that the database will set this property.
		 */
		if (!properties.hasOwnProperty(property)) {
			if (propertyMap[property].required) {
				throw new Error('Property \'' + property + '\' is required to create '
					+ 'a new ' + objectName + ' object.');
			}
			else if (propertyMap[property].hasOwnProperty('database_default')) {
				properties[property] = undefined;
				continue; // Skip validation, as the database will set this property
			}
			else if (propertyMap[property].hasOwnProperty('default_value')) {
				properties[property] = propertyMap[property].default_value;
			}
			else {
				throw new Error('Property \'' + property + '\' is missing and does'
					+ ' not have a \'database_default\' flag, or a \'default_value'
					+ '\'. Property Map for ' + objectName + ' is invalid.');
			}
		}

		validationError = validation.Validate(propertyMap[property].type, properties[property]);
		if (validationError) {
			validationErrors.push(validationError);
		}
	}

	return validationErrors;
}

/*  private undefined Builder(propertyMap, objectName)
 *
 *  Builder object
 *  var builder = new Builder(propertyMap, 'some object');
 *
 *  @param {object} propertyMap - A map describing the properties of the object
 *  @param {string} objectName - Name of the object the builder will be building
 */
function Builder (propertyMap, objectName) {

	var properties = {};
	var validationErrorHandler = undefined;

	// Generate a setter for each property.
	for (var property in propertyMap) {
		if (!propertyMap.hasOwnProperty(property)) {
			continue;
		}

		var setterName = 'Set' + property.charAt(0).toUpperCase() + property.slice(1);
		this[setterName] = function (value) {
			properties[property] = value;
			return this;
		};
	}

	// Set a handler that will be called when there are validation errors
	this.OnValidationErrors = function (handler) {
		if (typeof handler !== 'function') {
			throw new Error('handler argument must be a function.');
		}
		validationErrorHandler = handler;
	};

	// Build must be called to build the object
	this.Build = function () {

		// Enforce handling of validation errors
		if (validationErrorHandler === undefined) {
			throw new Error('Unhandled errors. Call OnValidationErrors(handler) before'
				+ 'calling Build() to handle validation errors.');
		}

		validationErrors = ValidateProperties(propertyMap, properties, objectName);
		if (validationErrors.length > 0) {
			return validationErrorHandler(validationErrors);
		}

		var immutableObject = new ImmutableObject(properties);
		ResetBuilder();
		return new immutableObject;
	};

	function ResetBuilder () {
		properties = {};
		validationErrorHandler = undefined;
	}
}

/*  private object ImmutableObject(properties)
 *
 *  An immutable object. Properties MUST be validated before being passed in.
 *  var newObject = new ImmutableObject(properties)
 *
 *  @param {object} properties - validated properties of the object to create
 */
function ImmutableObject (properties) {

	// Generate a getter for each property
	for (var property in properties) {
		if (!properties.hasOwnProperty(property)) {
			continue;
		}

		var getterName = 'Get' + property.charAt(0).toUpperCase() + property.slice(1);
		this[getterName] = function () {
			return properties[property];
		}
	}
}
