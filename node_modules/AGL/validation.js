'use strict';
//==============================================================================
//  Constants
//==============================================================================

var TYPES = {
    username    : ValidateUsername,
    password    : ValidatePassword,
    email       : ValidateEmail,
    public_id   : ValidatePublicId,
};

//==============================================================================
//  Public Functions
//==============================================================================

//  public string Validate(type, value)
//
//  Validates a value based on it's type.
//
//  @param {string} type of data
//  @param {*} value of the data to be validated
//
//  @return {?string} error or undef
//
module.exports.Validate = function (type, value) {
    if (!TYPES.hasOwnProperty(type)) {
        return type + " is not a valid type.";
    }
    return TYPES[type](value);
};

//==============================================================================
//  Private Functions
//==============================================================================

//  private string ValidateUsername(value)
//
//  Validate username
//
//  @param {string} value of username
//
//  @return {?string} error or undef
//
function ValidateUsername(value) {

    if (value.length > 25) {
        return "Username: " + value + " is invalid becasue it exceeds 25 characters";
    }

    var forbiddenChars = /\W/;
    if (forbiddenChars.test(value)) {
        return "Username: " + value + " is invalid because it contains a non-word character."
                + " Usernames must only contain digits, letters, and underscores.";
    }

    return undefined;
}

//  private string ValidatePassword(value)
//
//  Validate password hash. (Basically just checking
//  that this is a hashed password and not plain text)
//
//  @param {string} value of password hash
//
//  @return {?string} error or undef
//
function ValidatePassword(value) {

    if (value.length !== 16) {
        return "Password must be a hash of length 16 characters.";
    }

    return undefined;
}

//  private string ValidateEmail(value)
//
//  Validate email to RFC822 standard.
//
//  @param {string} value of email
//
//  @return {?string} error or undef
//
function ValidateEmail(value) {

    if (value.length > 50) {
        return "Email: " + value + " must not exceed 50 characters.";
    }

    var RFC822ValidEmail = /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*$/;
    if (!RFC822ValidEmail.test(value)) {
        return "Email: " + value + " is not a valid email address.";
    }

    return undefined;
}

//  private string ValidatePublicId(value)
//
//  Validate public id. Public are used in
//  urls on the client side.
//
//  @param {string} value of public id
//
//  @return {?string} error or undef
//
function ValidatePublicId(value) {

    if (value.length !== 8) {
        return "Public ID: " + value + " must be 8 characters long.";
    }

    var forbiddenChars = /[\W_]/;
    if (forbiddenChars.test(value)) {
        return "Public ID: " + value + " is invalid. Public Ids must only contain digits or letters.";
    }

    return undefined;
}

