/*
 *  @file Provides validation for all types used within AGL
 *
 *  Provides a list of types and their associated validation
 *  functions for all types used within AGL. The types validated
 *  here will match their respective datatypes in the database.
 *  All validation functions return undefined if the value passes
 *  validation and an instance of the TypeError object if the value
 *  fails validation.
 *
 *  @author Matt Lambert
 */

'use strict';
//==============================================================================
//  Modules
//==============================================================================

var validate = require('validate.js');

//==============================================================================
//  Constants
//==============================================================================

// 'type name'  : 'validation function'
var TYPES = {
	none            : PassValidation,
	string          : ValidateString,
	AGLUsername     : ValidateAGLUsername,
	AGLPasswordHash : ValidateAGLPasswordHash,
	email           : ValidateEmail,
	AGLPublicId     : ValidateAGLPublicId,
};

//==============================================================================
//  Public Functions
//==============================================================================

/*  public object Validate(type, value)
 *
 *  Validates a value based on it's type.
 *
 *  @param {string} type of data
 *  @param {*} value of the data to be validated
 *
 *  @return {?object} error or undef
 */
module.exports.Validate = function (type, value) {
	if (!TYPES.hasOwnProperty(type)) {
		return new TypeError(type + ' is not a valid type.');
	}
	return TYPES[type](value);
};

//==============================================================================
//  Private Functions
//==============================================================================

/*  private object PassValidation(value)
 *
 *  Returns undefined. Meaning no validation errors.
 *	Used to explicitly not validate a property.
 *
 *  @param {*} value
 *
 *  @return undefined
 */
function PassValidation(value) {
	return undefined;
}

/*  private object ValidateString(value)
 *
 *  Validate value is a string.
 *
 *  @param {string} value
 *
 *  @return {?object} error or undef
 */
function ValidateString(value) {
	if (validate.isString(value)) {
		return undefined;
	}
	else {
		return new TypeError(value + ' is not a string');
	}
}

/*  private object ValidateAGLUsername(value)
 *
 *  Validate an AGL username
 *
 *  @param {string} value of username
 *
 *  @return {?object} error or undef
 */
function ValidateAGLUsername(value) {

	var constraints = {
		username : {
			length : {
				minimum : 3,
				maximum : 25
			},
			format : {
				pattern : /\w+/i,
				message : 'must only contain letters, digits, and underscores.'
			}
		}
	};

	var validationError = validate({ username : value }, constraints);

	if (validationError) {
		return new TypeError(validationError.username + ' [' + value + ']');
	}

	return undefined;
}

/*  private object ValidateAGLPasswordHash(value)
 *
 *  Validate password hash. (Basically just checking
 *  that this is a hashed password and not plain text)
 *
 *  @param {string} value of password hash
 *
 
*  @return {?object} error or undef
 */
function ValidateAGLPasswordHash(value) {

	var constraints = {
		passwordHash : {
			length : {
				is : 16
			}
		}
	};

	var validationError = validate({ passwordHash : value }, constraints);

	if (validationError) {
		return new TypeError(validationError.passwordHash + ' [' + value + ']');
	}

	return undefined;
}

/*  private object ValidateEmail(value)
 *
 *  Validate email to RFC822 standard.
 *
 *  @param {string} value of email
 *
 *  @return {?object} error or undef
 */
function ValidateEmail(value) {

	var constraints = {
		email : {
			email : {
				message : 'does not look like a valid email'
			},
			length : {
				minimum : 3,
				maximum : 50
			}
		}
	};

	var validationError = validate({ email : value }, constraints);

	if (validationError) {
		return new TypeError(validationError.email + ' [' + value + ']');
	}

	return undefined;
}

/*  private object ValidateAGLPublicId(value)
 *
 *  Validate public id. Public are used in
 *  urls on the client side.
 *
 *  @param {string} value of public id
 *
 *  @return {?object} error or undef
 */
function ValidateAGLPublicId(value) {

	var constraints = {
		publicId : {
			length : {
				is : 8
			},
			format : {
				pattern : /[a-z0-9]+/i,
				message : 'must only contain letters and digits'
			}
		}
	};

	var validationError = validate({ publicId : value }, constraints);

	if (validationError) {
		return new TypeError(validationError.publicId + ' [' + value + ']');
	}

	return undefined;
}

